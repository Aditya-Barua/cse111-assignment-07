# -*- coding: utf-8 -*-
"""Assignment 07_21101004_Aditya Barua.ipnyb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1l20g0-sLZ-Wh92LEAMoMmpq-a4hWneYI
"""

#Task - 01
class Student:
    def __init__(self, name='Just a student', dept='nothing'):
        self.__name = name
        self.__department = dept
    def set_department(self, dept):
        self.__department = dept
    def get_name(self):
        return self.__name
    def set_name(self,name):
        self.__name = name
    def __str__(self):
        return 'Name: '+self.__name+' Department: '+self.__department

class BBA_Student(Student):
    def __init__(self,name= "Default"):
        super().__init__(name,dept = 'BBA')

print(BBA_Student())
print(BBA_Student('Humpty Dumpty'))
print(BBA_Student('Little Bo Peep'))

#Task - 02
class Vehicle:
    def __init__(self):
        self.x = 0
        self.y = 0
    def moveUp(self):
        self.y+=1
    def moveDown(self):
        self.y-=1
    def moveRight(self):
        self.x+=1
    def moveLeft(self):
        self.x-=1
    def __str__(self):
        return '('+str(self.x)+' , '+str(self.y)+')'

class Vehicle2010(Vehicle):
    def moveUpperRight(self):
        self.y+=1
        self.x+=1
    def moveUpperLeft(self):
        self.y+=1
        self.x-=1
    def moveLowerRight(self):
        self.y-=1
        self.x+=1
    def moveLowerLeft(self):
        self.y-=1
        self.x-=1
    def equals(self, var):
        if self.x == var.x and self.y == var.y:
            return True
        else:
            return False

print('Part 1')
print('------')
car = Vehicle()
print(car)
car.moveUp()
print(car)
car.moveLeft()
print(car)
car.moveDown()
print(car)
car.moveRight()
print(car)
print('------')
print('Part 2')
print('------')
car1 = Vehicle2010()
print(car1)
car1.moveLowerLeft()
print(car1)
car2 = Vehicle2010()
car2.moveLeft()
print(car1.equals(car2))
car2.moveDown()
print(car1.equals(car2))

#Task - 03

class Tournament:
    def __init__(self,name='Default'):
        self.__name = name
    def set_name(self,name):
        self.__name = name
    def get_name(self):
        return self.__name

class Cricket_Tournament(Tournament):
    def __init__(self,name='Default',team_no = 0,format='No type'):
        super().__init__(name)
        self.name = name
        self.team_no = team_no
        self.format = format

    def detail(self):
        return 'Cricket Tournament'+' Name: '+ self.name + '\n' + 'Number of teams: '+ str(self.team_no)+ '\n' + 'Type: ' + self.format

class Tennis_Tournament(Tournament):
    def __init__(self,name,player_no):
        super().__init__(name)
        self.name = name
        self.player_no = player_no
        
    def detail(self):
        return 'Tennis Tournament'+' Name: '+ self.name + '\n' + 'Number of player: '+ str(self.player_no)    


ct1 = Cricket_Tournament()
print(ct1.detail())
print("-----------------------")
ct2 = Cricket_Tournament("IPL",10,"t20")
print(ct2.detail())
print("-----------------------")
tt = Tennis_Tournament("Roland Garros",128)
print(tt.detail())

#Task - 04

class Product:
    def __init__(self,id, title, price):
        self.__id = id
        self. __title = title
        self. __price = price
    def get_id_title_price(self):
        return "ID: "+str(self.__id)+" Title:"+self.__title+" Price: "+str(self.__price)

class Book(Product):
    def __init__(self, id, title, price, isbn, publisher):
        super().__init__(id, title, price)
        self.isbn = isbn
        self.publisher = publisher

    def printDetail(self):
        print(Product.get_id_title_price(self))
        return 'ISBN: ' + self.isbn + ' Publisher: ' + self.publisher


class CD(Product):
    def __init__(self, id, title, price, band, duration, genre):
        super().__init__(id, title, price)
        self.band = band
        self.duration = duration
        self.genre = genre
    def printDetail(self):
        print(Product.get_id_title_price(self))
        return 'Band: ' + self.band + ' Duration: ' + str(self.duration) + 'minutes' + '\n' + 'Genre: ' + self.genre     


book = Book(1,"The Alchemist",500,"97806","HarperCollins")
print(book.printDetail())
print("-----------------------")
cd = CD(2,"Shotto",300,"Warfaze",50,"Hard Rock")
print(cd.printDetail())

#Task - 05

class Animal:
    def __init__(self,sound):
        self.__sound = sound
    def makeSound(self):
        return self.__sound

class Printer:
    def printSound(self, a):
        print(a.makeSound())

class Dog(Animal):
    def __init__(self,sound):
        super().__init__(sound)
class Cat(Animal):
    def __init__(self,sound):
        super().__init__(sound)

d1 = Dog('bark')
c1 = Cat('meow')
a1 = Animal('Animal does not make sound')
pr = Printer()
pr.printSound(a1)
pr.printSound(c1)
pr.printSound(d1)

#Task - 06
class Shape:
    def __init__(self, name='Default', height=0, base=0):
        self.area = 0
        self.name = name
        self.height = height
        self.base = base
    def get_height_base(self):
        return "Height: "+str(self.height)+",Base: "+str(self.base)

class triangle(Shape):
    def __init__(self,name='Default',  height=0, base=0):
        super().__init__(name,height,base)
    
    def calcArea(self):
        self.Area = 0.5 * self.height * self.base
    
    def printDetail(self):
        return 'Shape name:' + self.name + '\n'  + self.get_height_base() + '\n' + 'Area:' + str(self.Area)


class trapezoid(Shape):
    def __init__(self,name='Default',  height=0, base=0, side_a =0):
        super().__init__(name,height,base)
        self.side_a = side_a
    
    def calcArea(self):
        self.Area = self.height*((self.side_a+self.base)/2)
    
    def printDetail(self):
        return 'Shape name:' + self.name + '\n' + self.get_height_base()  + ',Side_A:'+ str(self.side_a) + '\n' + 'Area:' + str(self.Area)       

tri_default = triangle()
tri_default.calcArea()
print(tri_default.printDetail())
print('--------------------------')
tri = triangle('Triangle', 10, 5)
tri.calcArea()
print(tri.printDetail())
print('---------------------------')
trap = trapezoid('Trapezoid', 10, 6, 4)
trap.calcArea()
print(trap.printDetail())

#Task - 07

class Football:
    def __init__(self, team_name,name, role):
        self.__team = team_name
        self.__name = name
        self.role = role
        self.earning_per_match = 0
    def get_name_team(self):
        return 'Name: '+self.__name+', Team Name: ' +self.__team

class Player(Football):
    def __init__(self,team_name,player_name,position,goal,match):
        super().__init__(team_name,player_name,position)
        self.goal = goal 
        self.match = match 
        self.earning_per_match =  self.match*10 +self.goal*1000 

    def calculate_ratio(self):
        self.ratio = float (self.goal / self.match)

    def print_details(self):
        print(Football.get_name_team(self))
        print('Team Role:',self.role)
        print('Team Goal:',self.goal,',Total Played:',self.match)
        print('Goal Ratio:',self.ratio)
        print('Match Earning:',self.earning_per_match,'k')


class Manager(Football):
    def __init__(self,team_name,name,role,win):
        super().__init__(team_name,name,role)
        self.win = win 
        self.earning_per_match =  self.win*1000 


    def print_details(self):
        print(Football.get_name_team(self))
        print('Team Role:',self.role)
        print('Team Win:',self.win)
        print('Match Earning:',self.earning_per_match,'k')


player_one = Player('Juventus', 'Ronaldo', 'Striker', 25, 32)
player_one.calculate_ratio()
player_one.print_details()
print('------------------------------------------')
manager_one = Manager('Real Madrid', 'Zidane', 'Manager', 25)
manager_one.print_details()